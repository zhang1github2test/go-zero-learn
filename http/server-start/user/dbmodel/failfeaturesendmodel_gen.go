// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	failFeatureSendFieldNames          = builder.RawFieldNames(&FailFeatureSend{})
	failFeatureSendRows                = strings.Join(failFeatureSendFieldNames, ",")
	failFeatureSendRowsExpectAutoSet   = strings.Join(stringx.Remove(failFeatureSendFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	failFeatureSendRowsWithPlaceHolder = strings.Join(stringx.Remove(failFeatureSendFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	failFeatureSendModel interface {
		Insert(ctx context.Context, data *FailFeatureSend) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*FailFeatureSend, error)
		Update(ctx context.Context, data *FailFeatureSend) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFailFeatureSendModel struct {
		conn  sqlx.SqlConn
		table string
	}

	FailFeatureSend struct {
		Id         int64         `db:"id"`
		Mhid       string        `db:"mhid"` // 民航ID
		Feature    string        `db:"feature"`
		Flag       sql.NullInt64 `db:"flag"`        // 0 - 未推送；1 - 已推送
		CreateTime sql.NullTime  `db:"create_time"` // 生成时间
		UpdateTime sql.NullTime  `db:"update_time"` // 更新时间
	}
)

func newFailFeatureSendModel(conn sqlx.SqlConn) *defaultFailFeatureSendModel {
	return &defaultFailFeatureSendModel{
		conn:  conn,
		table: "`fail_feature_send`",
	}
}

func (m *defaultFailFeatureSendModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultFailFeatureSendModel) FindOne(ctx context.Context, id int64) (*FailFeatureSend, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", failFeatureSendRows, m.table)
	var resp FailFeatureSend
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFailFeatureSendModel) Insert(ctx context.Context, data *FailFeatureSend) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, failFeatureSendRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Mhid, data.Feature, data.Flag)
	return ret, err
}

func (m *defaultFailFeatureSendModel) Update(ctx context.Context, data *FailFeatureSend) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, failFeatureSendRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Mhid, data.Feature, data.Flag, data.Id)
	return err
}

func (m *defaultFailFeatureSendModel) tableName() string {
	return m.table
}
