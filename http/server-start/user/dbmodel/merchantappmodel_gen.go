// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	merchantAppFieldNames          = builder.RawFieldNames(&MerchantApp{})
	merchantAppRows                = strings.Join(merchantAppFieldNames, ",")
	merchantAppRowsExpectAutoSet   = strings.Join(stringx.Remove(merchantAppFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	merchantAppRowsWithPlaceHolder = strings.Join(stringx.Remove(merchantAppFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	merchantAppModel interface {
		Insert(ctx context.Context, data *MerchantApp) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*MerchantApp, error)
		Update(ctx context.Context, data *MerchantApp) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMerchantAppModel struct {
		conn  sqlx.SqlConn
		table string
	}

	MerchantApp struct {
		Id          int64     `db:"id"`
		AppNo       string    `db:"app_no"`
		AirportCode string    `db:"airport_code"`
		CreateTime  time.Time `db:"create_time"`
	}
)

func newMerchantAppModel(conn sqlx.SqlConn) *defaultMerchantAppModel {
	return &defaultMerchantAppModel{
		conn:  conn,
		table: "`merchant_app`",
	}
}

func (m *defaultMerchantAppModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultMerchantAppModel) FindOne(ctx context.Context, id int64) (*MerchantApp, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", merchantAppRows, m.table)
	var resp MerchantApp
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMerchantAppModel) Insert(ctx context.Context, data *MerchantApp) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, merchantAppRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AppNo, data.AirportCode)
	return ret, err
}

func (m *defaultMerchantAppModel) Update(ctx context.Context, data *MerchantApp) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, merchantAppRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.AppNo, data.AirportCode, data.Id)
	return err
}

func (m *defaultMerchantAppModel) tableName() string {
	return m.table
}
