// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	appInfoFieldNames          = builder.RawFieldNames(&AppInfo{})
	appInfoRows                = strings.Join(appInfoFieldNames, ",")
	appInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(appInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	appInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(appInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	appInfoModel interface {
		Insert(ctx context.Context, data *AppInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AppInfo, error)
		Update(ctx context.Context, data *AppInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAppInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AppInfo struct {
		Id                  int64     `db:"id"`                    // 主键ID
		AppId               string    `db:"app_id"`                // 应用id
		AppSecret           string    `db:"app_secret"`            // 鉴权密钥
		ServerPublicKey     string    `db:"server_public_key"`     // 报文加密公钥
		RequestIdentityData string    `db:"request_identity_data"` // 数据权限
		Status              int64     `db:"status"`                // 状态1-正常, 0-停用, 2-删除
		CreateTime          time.Time `db:"create_time"`           // 创建时间
		UpdateTime          time.Time `db:"update_time"`           // 修改时间
		AirportCode         string    `db:"airport_code"`
	}
)

func newAppInfoModel(conn sqlx.SqlConn) *defaultAppInfoModel {
	return &defaultAppInfoModel{
		conn:  conn,
		table: "`app_info`",
	}
}

func (m *defaultAppInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAppInfoModel) FindOne(ctx context.Context, id int64) (*AppInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appInfoRows, m.table)
	var resp AppInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppInfoModel) Insert(ctx context.Context, data *AppInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, appInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AppId, data.AppSecret, data.ServerPublicKey, data.RequestIdentityData, data.Status, data.AirportCode)
	return ret, err
}

func (m *defaultAppInfoModel) Update(ctx context.Context, data *AppInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, appInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.AppId, data.AppSecret, data.ServerPublicKey, data.RequestIdentityData, data.Status, data.AirportCode, data.Id)
	return err
}

func (m *defaultAppInfoModel) tableName() string {
	return m.table
}
