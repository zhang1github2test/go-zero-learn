// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	checkInUserFieldNames          = builder.RawFieldNames(&CheckInUser{})
	checkInUserRows                = strings.Join(checkInUserFieldNames, ",")
	checkInUserRowsExpectAutoSet   = strings.Join(stringx.Remove(checkInUserFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	checkInUserRowsWithPlaceHolder = strings.Join(stringx.Remove(checkInUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	checkInUserModel interface {
		Insert(ctx context.Context, data *CheckInUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CheckInUser, error)
		Update(ctx context.Context, data *CheckInUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCheckInUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CheckInUser struct {
		Id         int64          `db:"id"`          // 主键ID
		Mhid       string         `db:"mhid"`        // 民航ID，全局唯一
		CertNum    string         `db:"cert_num"`    // 身份证号
		CertName   sql.NullString `db:"cert_name"`   // 姓名
		FlyTime    sql.NullTime   `db:"fly_time"`    // 起飞时间
		CheckTime  sql.NullTime   `db:"check_time"`  // 定时任务扫描同步数据的时间
		Flag       sql.NullInt64  `db:"flag"`        // 0 -未开通，1 - 已开通
		Feature    sql.NullString `db:"feature"`     // 特征值
		CreateTime time.Time      `db:"create_time"` // 创建时间
		UpdateTime time.Time      `db:"update_time"` // 更新时间
	}
)

func newCheckInUserModel(conn sqlx.SqlConn) *defaultCheckInUserModel {
	return &defaultCheckInUserModel{
		conn:  conn,
		table: "`check_in_user`",
	}
}

func (m *defaultCheckInUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCheckInUserModel) FindOne(ctx context.Context, id int64) (*CheckInUser, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", checkInUserRows, m.table)
	var resp CheckInUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCheckInUserModel) Insert(ctx context.Context, data *CheckInUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, checkInUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Mhid, data.CertNum, data.CertName, data.FlyTime, data.CheckTime, data.Flag, data.Feature)
	return ret, err
}

func (m *defaultCheckInUserModel) Update(ctx context.Context, data *CheckInUser) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, checkInUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Mhid, data.CertNum, data.CertName, data.FlyTime, data.CheckTime, data.Flag, data.Feature, data.Id)
	return err
}

func (m *defaultCheckInUserModel) tableName() string {
	return m.table
}
