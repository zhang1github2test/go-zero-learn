// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pushRetryTaskFieldNames          = builder.RawFieldNames(&PushRetryTask{})
	pushRetryTaskRows                = strings.Join(pushRetryTaskFieldNames, ",")
	pushRetryTaskRowsExpectAutoSet   = strings.Join(stringx.Remove(pushRetryTaskFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	pushRetryTaskRowsWithPlaceHolder = strings.Join(stringx.Remove(pushRetryTaskFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	pushRetryTaskModel interface {
		Insert(ctx context.Context, data *PushRetryTask) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PushRetryTask, error)
		Update(ctx context.Context, data *PushRetryTask) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPushRetryTaskModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PushRetryTask struct {
		Id              int64          `db:"id"`                // 主键id
		Content         string         `db:"content"`           // 消息内容Json
		RetryCountTotal int64          `db:"retry_count_total"` // 失败重试总次数
		RetryCount      int64          `db:"retry_count"`       // 失败重试次数
		CreateTime      time.Time      `db:"create_time"`       // 创建时间
		UpdateTime      time.Time      `db:"update_time"`       // 更新时间
		RetryType       string         `db:"retry_type"`        // 重试类型，1、2、3
		Msg             sql.NullString `db:"msg"`               // 失败信息描述
	}
)

func newPushRetryTaskModel(conn sqlx.SqlConn) *defaultPushRetryTaskModel {
	return &defaultPushRetryTaskModel{
		conn:  conn,
		table: "`push_retry_task`",
	}
}

func (m *defaultPushRetryTaskModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPushRetryTaskModel) FindOne(ctx context.Context, id int64) (*PushRetryTask, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pushRetryTaskRows, m.table)
	var resp PushRetryTask
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPushRetryTaskModel) Insert(ctx context.Context, data *PushRetryTask) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, pushRetryTaskRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Content, data.RetryCountTotal, data.RetryCount, data.RetryType, data.Msg)
	return ret, err
}

func (m *defaultPushRetryTaskModel) Update(ctx context.Context, data *PushRetryTask) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pushRetryTaskRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Content, data.RetryCountTotal, data.RetryCount, data.RetryType, data.Msg, data.Id)
	return err
}

func (m *defaultPushRetryTaskModel) tableName() string {
	return m.table
}
