// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	failValidateLogFieldNames          = builder.RawFieldNames(&FailValidateLog{})
	failValidateLogRows                = strings.Join(failValidateLogFieldNames, ",")
	failValidateLogRowsExpectAutoSet   = strings.Join(stringx.Remove(failValidateLogFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	failValidateLogRowsWithPlaceHolder = strings.Join(stringx.Remove(failValidateLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	failValidateLogModel interface {
		Insert(ctx context.Context, data *FailValidateLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*FailValidateLog, error)
		Update(ctx context.Context, data *FailValidateLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFailValidateLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	FailValidateLog struct {
		Id                  int64         `db:"id"`                    // 主键ID
		DeviceId            string        `db:"device_id"`             // 设备id
		Mhid                string        `db:"mhid"`                  // mhid
		RequestIdentityData string        `db:"request_identity_data"` // 授权数据
		CodeContent         string        `db:"code_content"`          // 码值
		Status              int64         `db:"status"`                // 核验状态 1 - 成功，0-失败，-1未知
		FailReson           string        `db:"fail_reson"`            // 失败原因
		DeviceType          int64         `db:"device_type"`           // 设备类型
		DeviceEnv           int64         `db:"device_env"`            // 使用环境
		RequestId           string        `db:"request_id"`            // 核验请求ID
		TraceId             string        `db:"trace_id"`              // 流水id
		CheckType           sql.NullInt64 `db:"check_type"`            // 核验类型（1刷码  2刷脸）
		LivePhoto           string        `db:"live_photo"`            // 现场照片
		CreateTime          time.Time     `db:"create_time"`           // 创建时间
		ValidateTime        time.Time     `db:"validate_time"`         // 核验时间
		CodeType            int64         `db:"code_type"`             // 码类型: 1-ctid;  2-民航码
		ChannelId           string        `db:"channel_id"`            // 端
	}
)

func newFailValidateLogModel(conn sqlx.SqlConn) *defaultFailValidateLogModel {
	return &defaultFailValidateLogModel{
		conn:  conn,
		table: "`fail_validate_log`",
	}
}

func (m *defaultFailValidateLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultFailValidateLogModel) FindOne(ctx context.Context, id int64) (*FailValidateLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", failValidateLogRows, m.table)
	var resp FailValidateLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFailValidateLogModel) Insert(ctx context.Context, data *FailValidateLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, failValidateLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.DeviceId, data.Mhid, data.RequestIdentityData, data.CodeContent, data.Status, data.FailReson, data.DeviceType, data.DeviceEnv, data.RequestId, data.TraceId, data.CheckType, data.LivePhoto, data.ValidateTime, data.CodeType, data.ChannelId)
	return ret, err
}

func (m *defaultFailValidateLogModel) Update(ctx context.Context, data *FailValidateLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, failValidateLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeviceId, data.Mhid, data.RequestIdentityData, data.CodeContent, data.Status, data.FailReson, data.DeviceType, data.DeviceEnv, data.RequestId, data.TraceId, data.CheckType, data.LivePhoto, data.ValidateTime, data.CodeType, data.ChannelId, data.Id)
	return err
}

func (m *defaultFailValidateLogModel) tableName() string {
	return m.table
}
