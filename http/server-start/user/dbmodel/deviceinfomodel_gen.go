// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	deviceInfoFieldNames          = builder.RawFieldNames(&DeviceInfo{})
	deviceInfoRows                = strings.Join(deviceInfoFieldNames, ",")
	deviceInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(deviceInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	deviceInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(deviceInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	deviceInfoModel interface {
		Insert(ctx context.Context, data *DeviceInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*DeviceInfo, error)
		Update(ctx context.Context, data *DeviceInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultDeviceInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	DeviceInfo struct {
		Id                  int64         `db:"id"`                    // 主键ID
		DeviceId            string        `db:"device_id"`             // 设备id
		RequestIdentityData string        `db:"request_identity_data"` // 数据权限
		Type                int64         `db:"type"`                  // 类型：1安检网(需要照片)  2离岗网
		AppId               string        `db:"app_id"`                // 应用id
		Status              int64         `db:"status"`                // 状态: 1-正常 0-停用 2-删除
		CreateTime          time.Time     `db:"create_time"`           // 创建时间
		UpdateTime          time.Time     `db:"update_time"`           // 修改时间
		DeviceEnv           sql.NullInt64 `db:"device_env"`            // 7、预安检8、安检9、值机柜台10、自助值机柜机11、自助行李托运柜机7、预安检8、安检9、值机柜台10、自助值机柜机11、自助行李托运柜机
	}
)

func newDeviceInfoModel(conn sqlx.SqlConn) *defaultDeviceInfoModel {
	return &defaultDeviceInfoModel{
		conn:  conn,
		table: "`device_info`",
	}
}

func (m *defaultDeviceInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultDeviceInfoModel) FindOne(ctx context.Context, id int64) (*DeviceInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", deviceInfoRows, m.table)
	var resp DeviceInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeviceInfoModel) Insert(ctx context.Context, data *DeviceInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, deviceInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeviceId, data.RequestIdentityData, data.Type, data.AppId, data.Status, data.DeviceEnv)
	return ret, err
}

func (m *defaultDeviceInfoModel) Update(ctx context.Context, data *DeviceInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, deviceInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeviceId, data.RequestIdentityData, data.Type, data.AppId, data.Status, data.DeviceEnv, data.Id)
	return err
}

func (m *defaultDeviceInfoModel) tableName() string {
	return m.table
}
