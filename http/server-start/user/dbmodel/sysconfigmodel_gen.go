// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysConfigFieldNames          = builder.RawFieldNames(&SysConfig{})
	sysConfigRows                = strings.Join(sysConfigFieldNames, ",")
	sysConfigRowsExpectAutoSet   = strings.Join(stringx.Remove(sysConfigFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysConfigRowsWithPlaceHolder = strings.Join(stringx.Remove(sysConfigFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	sysConfigModel interface {
		Insert(ctx context.Context, data *SysConfig) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysConfig, error)
		FindOneByCode(ctx context.Context, code string) (*SysConfig, error)
		Update(ctx context.Context, data *SysConfig) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysConfigModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysConfig struct {
		Id         int64          `db:"id"`          // 主键ID
		Code       string         `db:"code"`        // 配置编码
		Type       string         `db:"type"`        // 配置分类
		Value      string         `db:"value"`       // 配置值
		Remark     sql.NullString `db:"remark"`      // 备注
		Status     int64          `db:"status"`      // 状态1-正常, 0-停用, 2-删除
		CreateTime time.Time      `db:"create_time"` // 创建时间
		UpdateTime time.Time      `db:"update_time"` // 修改时间
	}
)

func newSysConfigModel(conn sqlx.SqlConn) *defaultSysConfigModel {
	return &defaultSysConfigModel{
		conn:  conn,
		table: "`sys_config`",
	}
}

func (m *defaultSysConfigModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSysConfigModel) FindOne(ctx context.Context, id int64) (*SysConfig, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysConfigRows, m.table)
	var resp SysConfig
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysConfigModel) FindOneByCode(ctx context.Context, code string) (*SysConfig, error) {
	var resp SysConfig
	query := fmt.Sprintf("select %s from %s where `code` = ? limit 1", sysConfigRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, code)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysConfigModel) Insert(ctx context.Context, data *SysConfig) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, sysConfigRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Code, data.Type, data.Value, data.Remark, data.Status)
	return ret, err
}

func (m *defaultSysConfigModel) Update(ctx context.Context, newData *SysConfig) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysConfigRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Code, newData.Type, newData.Value, newData.Remark, newData.Status, newData.Id)
	return err
}

func (m *defaultSysConfigModel) tableName() string {
	return m.table
}
