// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	failUserRealNameFieldNames          = builder.RawFieldNames(&FailUserRealName{})
	failUserRealNameRows                = strings.Join(failUserRealNameFieldNames, ",")
	failUserRealNameRowsExpectAutoSet   = strings.Join(stringx.Remove(failUserRealNameFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	failUserRealNameRowsWithPlaceHolder = strings.Join(stringx.Remove(failUserRealNameFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	failUserRealNameModel interface {
		Insert(ctx context.Context, data *FailUserRealName) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*FailUserRealName, error)
		Update(ctx context.Context, data *FailUserRealName) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFailUserRealNameModel struct {
		conn  sqlx.SqlConn
		table string
	}

	FailUserRealName struct {
		Id         int64         `db:"id"`          // 主键
		Uid        string        `db:"uid"`         // 旅客唯一ID
		CertName   string        `db:"cert_name"`   // 姓名
		CertNum    string        `db:"cert_num"`    // 身份证号码
		Type       sql.NullInt64 `db:"type"`        // 1 - 实人推送，2 - 实名推送
		CreateTime time.Time     `db:"create_time"` // 创建时间
		UpdateTime time.Time     `db:"update_time"` // 更新时间
		Flag       int64         `db:"flag"`        // 0 - 未推送；1 - 已推送
	}
)

func newFailUserRealNameModel(conn sqlx.SqlConn) *defaultFailUserRealNameModel {
	return &defaultFailUserRealNameModel{
		conn:  conn,
		table: "`fail_user_real_name`",
	}
}

func (m *defaultFailUserRealNameModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultFailUserRealNameModel) FindOne(ctx context.Context, id int64) (*FailUserRealName, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", failUserRealNameRows, m.table)
	var resp FailUserRealName
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFailUserRealNameModel) Insert(ctx context.Context, data *FailUserRealName) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, failUserRealNameRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Uid, data.CertName, data.CertNum, data.Type, data.Flag)
	return ret, err
}

func (m *defaultFailUserRealNameModel) Update(ctx context.Context, data *FailUserRealName) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, failUserRealNameRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Uid, data.CertName, data.CertNum, data.Type, data.Flag, data.Id)
	return err
}

func (m *defaultFailUserRealNameModel) tableName() string {
	return m.table
}
